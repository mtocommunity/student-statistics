---
import ChevronRight from "@assets/svg/lu-chevron-right.svg";

// Context
interface Props {
  page: number;
  totalPages: number;
  baseUrl: string;
}

const { page, totalPages, baseUrl } = Astro.props;

// Pagination
// - Previous page
const previousPage = page - 1;
const hasPreviousPage = page > 1;

const previousPageUrl = new URL(baseUrl, Astro.url);
previousPageUrl.searchParams.set("page", previousPage.toString());

// - Next page
const nextPage = page + 1;
const hasNextPage = nextPage <= totalPages;

const nextPageUrl = new URL(baseUrl, Astro.url);
nextPageUrl.searchParams.set("page", nextPage.toString());

// - Pages to display
const isOverflowAtStart = page > 3 && totalPages > 5;
const isOverflowAtEnd = page < totalPages - 1 && totalPages > 5;
const pages = [];

if (isOverflowAtStart && isOverflowAtEnd) {
  pages.push(page - 1, page, page + 1);
} else if (isOverflowAtStart) {
  pages.push(totalPages - 3, totalPages - 2, totalPages - 1, totalPages);
} else if (isOverflowAtEnd) {
  pages.push(1, 2, 3, 4);
} else {
  pages.push(...Array.from({ length: totalPages }, (_, i) => i + 1));
}
---

<nav>
  <ul class="flex items-center justify-center">
    <li transition:name="pagination-previous">
      <a
        {...hasPreviousPage
          ? { href: previousPageUrl.toString() }
          : { "aria-disabled": "true", tabindex: "-1" }}
      >
        <span class="sr-only">Página anterior</span>
        <ChevronRight class="size-5 rotate-180" />
      </a>
    </li>

    {
      isOverflowAtStart && (
        <>
          <li transition:name="pagination-first">
            <a href={`${baseUrl}?page=1`}>1</a>
          </li>
          <li>
            <span class="pagination-overflow">...</span>
          </li>
        </>
      )
    }

    {
      pages.map((pageNumber) => {
        // Check if the page number is active
        const isActive = pageNumber === page;

        // URL for the page
        const url = new URL(baseUrl, Astro.url);
        url.searchParams.set("page", pageNumber.toString());

        // Transition name
        let transitionName: string | undefined;

        if (pageNumber === 1) transitionName = "pagination-first";
        else if (pageNumber === totalPages) transitionName = "pagination-last";
        else transitionName = `pagination-${pageNumber}`;

        return (
          <li
            class:list={[
              {
                "bg-primary-800 rounded-full": isActive,
              },
            ]}
            transition:name={transitionName}
          >
            <a href={url.toString()}>{pageNumber}</a>
          </li>
        );
      })
    }

    {
      isOverflowAtEnd && (
        <>
          <li>
            <span class="pagination-overflow">...</span>
          </li>
          <li transition:name="pagination-last">
            <a href={`${baseUrl}?page=${totalPages}`}>{totalPages}</a>
          </li>
        </>
      )
    }

    <li transition:name="pagination-next">
      <a
        {...hasNextPage
          ? { href: nextPageUrl.toString() }
          : { "aria-disabled": "true", tabindex: "-1" }}
      >
        <ChevronRight class="size-5" />
        <span class="sr-only">Página siguiente</span>
      </a>
    </li>
  </ul>
</nav>

<style>
  @reference "@styles";

  a,
  li > .pagination-overflow {
    @apply flex size-8 items-center justify-center;
  }

  li > .pagination-overflow {
    @apply px-3;
  }
</style>
