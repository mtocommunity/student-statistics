---
import Link from "@/core/components/atoms/Link.astro";
import { sidebarLinks } from "@/core/components/organisms/data/sidebar-data";
import MoveLeft from "@assets/svg/lu-move-left.svg";
import LogOut from "@assets/svg/lu-log-out.svg";
import { sidebarNavItemsClassname } from "@/core/components/organisms/styles/sidebar-styles";
import { sidebarLinkMatch } from "@/core/components/organisms/auxiliar/sidebar-aux";

// Context
const currentPathname = Astro.url.pathname;
let index = sidebarLinks.findIndex((link) =>
  sidebarLinkMatch(link.href, currentPathname),
);

if (index === -1) index = -3;
---

<aside
  class:list={[
    "bg-primary-950 no-scrollbar sticky top-0 z-30 flex max-h-screen w-16 flex-col overflow-y-auto text-white",
    "z-50 lg:w-22",
  ]}
  transition:persist
  id="home-aside"
>
  <input type="checkbox" id="menu-toggle" hidden />
  <button
    id="menu-button"
    class:list={[
      "flex h-15 cursor-pointer items-center justify-center",
      "lg:h-18",
    ]}
    tabindex="0"
    title="Menú"
    aria-label="Menú"
    aria-expanded="false"
    aria-controls="menu"
  >
    <div class="relative h-10">
      <div
        class="bg-primary-50 absolute top-[32%] left-1/2 h-[2px] w-5 -translate-1/2 rounded"
      >
      </div>
      <div
        class="bg-primary-50 absolute top-1/2 left-1/2 h-[2px] w-5 -translate-1/2 rounded"
      >
      </div>
      <div
        class="bg-primary-50 absolute top-[68%] left-1/2 h-[2px] w-5 -translate-1/2 rounded"
      >
      </div>
    </div>
  </button>

  <div class="overlay hidden"></div>
  <nav
    id="menu"
    class:list={[
      "no-scrollbar hidden w-16 flex-1 flex-col overflow-y-auto transition-[width]",
      "lg:flex lg:w-22",
    ]}
  >
    <button
      id="menu-close-button"
      class:list={["hidden w-full cursor-pointer px-5 py-3.5", "lg:py-5"]}
      title="Cerrar menú"
      tabindex="-1"
    >
      <MoveLeft class="size-8 text-white" />
    </button>

    <div>
      <div
        role="none"
        class="bg-secondary-400 absolute top-[calc(var(--spacing)_*_18_+_var(--position-index)*var(--spacing)_*_20)] left-0 z-60 h-20 w-1 rounded-r transition-[top]"
        style=`--position-index: ${index}`
        id="sidebar-highlight"
      >
      </div>

      <ul>
        {
          sidebarLinks.map((link) => {
            const { href, label, svg: SVG } = link;

            return (
              <li>
                <a
                  href={href}
                  class={sidebarNavItemsClassname}
                  title={label}
                  data-current={
                    sidebarLinkMatch(href, currentPathname) ? "" : undefined
                  }
                >
                  <SVG class="size-6" />

                  {label}
                </a>
              </li>
            );
          })
        }
      </ul>
    </div>

    <footer class="mt-auto">
      <Link
        href="/logout"
        variant="ghost"
        colorSchema="secondary"
        class:list={[
          sidebarNavItemsClassname,
          "flex items-center gap-2 rounded-none py-2",
        ]}
        title="Cerrar sesión"
        data-astro-prefetch="false"
      >
        <LogOut class="aspect-square size-6" />

        <span id="logout-text" class="hidden">Salir</span>
      </Link>
    </footer>
  </nav>

  <script>
    import { sidebarLinkMatch } from "@/core/components/organisms/auxiliar/sidebar-aux";
    import { controlBodyScrollLock } from "@/lib/body-scroll";
    import { $, $$ } from "@/lib/dom-selector";

    // Elements
    const $overlay = $<HTMLDivElement>("#home-aside .overlay")!;
    const $homeAside = $<HTMLDivElement>("#home-aside")!;
    const $menuToggle = $<HTMLInputElement>("#menu-toggle")!;
    const $menuButton = $<HTMLLabelElement>("#menu-button")!;
    const $menuCloseButton = $<HTMLButtonElement>("#menu-close-button")!;

    // Scroll
    const { lockScroll, unlockScroll } = controlBodyScrollLock();

    // Toggle the navigation menu
    function toggleMenu(bool: boolean) {
      $menuToggle.checked = bool;
      $menuButton.setAttribute("aria-expanded", bool.toString());

      $menuButton.tabIndex = bool ? -1 : 0;
      $menuCloseButton.tabIndex = bool ? 0 : -1;

      if (bool) {
        $menuCloseButton.focus();

        lockScroll();

        $homeAside.classList.remove("overflow-y-auto");
      } else {
        $menuButton.focus();

        unlockScroll();

        $homeAside.classList.add("overflow-y-auto");
      }

      // Dispatch custom event for menu open
      const event = new CustomEvent(bool ? "menu-open" : "menu-close", {
        bubbles: true,
        composed: true,
      });
      document.dispatchEvent(event);
    }

    $menuToggle.addEventListener("change", (e) => {
      const isChecked = (e.target as HTMLInputElement).checked;

      toggleMenu(isChecked);
    });

    $menuButton.addEventListener("click", () => toggleMenu(true));
    $menuButton.addEventListener("keydown", (e) => {
      if (e.key !== "Enter") return;

      e.preventDefault();
      toggleMenu(true);
    });

    $menuCloseButton.addEventListener("keydown", (e) => {
      if (e.key === "Enter") return;

      e.preventDefault();
      toggleMenu(false);
    });
    $menuCloseButton.addEventListener("click", () => toggleMenu(false));

    $overlay.addEventListener("click", () => toggleMenu(false));

    // Links
    const linksSelector = "nav > div > ul a";
    const $sidebarHighlight = $<HTMLDivElement>("#sidebar-highlight")!;
    const $links = $$<HTMLAnchorElement>(linksSelector, $homeAside);

    $links.forEach(($link) =>
      $link.addEventListener("click", () => toggleMenu(false)),
    );

    document.addEventListener("astro:after-swap", () => {
      const currentPathname = window.location.pathname;

      let isFound = false;

      $links.forEach(($link, i) => {
        const href = $link.href;

        if (!href) return;

        const isCurrent = sidebarLinkMatch(href, currentPathname);

        if (isCurrent) {
          $link.setAttribute("data-current", "");

          $sidebarHighlight.style.setProperty("--position-index", i.toString());

          isFound = true;
        } else $link.removeAttribute("data-current");
      });

      if (!isFound)
        $sidebarHighlight.style.setProperty("--position-index", "-3");
    });
  </script>

  <style>
    @reference "@styles";

    #menu-toggle:checked {
      & ~ #menu {
        @apply bg-primary-950 absolute top-0 left-0 z-20 flex min-h-svh w-72;

        & #menu-close-button {
          @apply block;
        }

        & a {
          @apply flex-row justify-start gap-4 px-5 text-base;

          & span {
            @apply text-base;
          }
        }

        & #logout-text {
          @apply inline-block;
        }
      }

      & ~ .overlay {
        @apply fixed inset-0 z-10 block;
        background-color: color-mix(
          in srgb,
          var(--color-primary-950) 30%,
          transparent 100%
        );
      }
    }
  </style>
</aside>
